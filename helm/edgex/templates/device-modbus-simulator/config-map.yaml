apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.edgex.device.service.name }}-config
  labels:
    {{- include "edgex.labels" (dict "ctx" . "AppName" $.Values.edgex.device.service.name) | indent 4 }}
data:
  configuration.toml: |
    [Writable]
    LogLevel = 'INFO'

    [Service]
    BootTimeout = 30000
    CheckInterval = '10s'
    ClientMonitor = 15000
    Host = '0.0.0.0'
    Port = 49991
    Protocol = 'http'
    StartupMsg = 'device modbus started'
    Timeout = 5000
    ConnectRetries = 10
    Labels = []
    EnableAsyncReadings = true
    AsyncBufferSize = 16

    [Registry]
    Host = 'edgex-consul'
    Port = 8500
    Type = 'consul'

    [Logging]
    EnableRemote = false
    File = ''

    [Clients]
      [Clients.Data]
      Protocol = 'http'
      Host = 'edgex-core-data'
      Port = 48080

      [Clients.Metadata]
      Protocol = 'http'
      Host = 'edgex-core-metadata'
      Port = 48081

      [Clients.Logging]
      Protocol = 'http'
      Host = 'edgex-support-logging'
      Port = 48061

    [Device]
      DataTransform = true
      InitCmd = ''
      InitCmdArgs = ''
      MaxCmdOps = 128
      MaxCmdValueLen = 256
      RemoveCmd = ''
      RemoveCmdArgs = ''
      ProfilesDir = '/profiles'
      UpdateLastConnected = false

    # Pre-define Devices
    [[DeviceList]]
      Name = "Temperature Sensor"
      Profile = "modbus_temperature_sensor"
      Description = "Modbus Temperature Sensor which controls the AC Unit"
      labels = [ "temperature","modbus", "plc" ]
      [[DeviceList.AutoEvents]]
        Frequency = "1s"
        OnChange = false
        Resource = "TemperatureSensor"
      [DeviceList.Protocols.modbus-tcp]
        Address = "{{.Values.edgex.device.simulator.name }}"
        Port = "5020"
        UnitID = "1"
        BaudRate = "19200"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.edgex.device.service.name }}-profiles
  labels:
    {{- include "edgex.labels" (dict "ctx" . "AppName" $.Values.edgex.device.service.name) | indent 4 }}
data:
  device.yaml: |
    name: "modbus_temperature_sensor"
    manufacturer: "Generic"
    model: "Generic PLC Temperature Sensor"
    description: "Demonstration temperature/fan scenario"
    labels:
      - "modbus"
      - "temperature"
      - "plc"
    deviceResources:
      - name: "TemperatureSensor"
        description: "Temperature Sensor Reading"
        attributes:
          { primaryTable: "HOLDING_REGISTERS", startingAddress: "4603" }
        properties:
          value:
            { type: "UINT16", readWrite: "RW", size: "1", scale: "1", minimum: "0", maximum: "65535", defaultValue: "0"}
          units:
            { type: "String", readWrite: "R", defaultValue: "0"}
    deviceCommands:
      - name: "SensorTemperature"
        get:
          - { operation: "get", object: "TemperatureSensor", parameter: "TemperatureSensor" }
        set:
          - { operation: "set", object: "TemperatureSensor", parameter: "TemperatureSensor" }
    coreCommands:
      - name: SensorTemperature
        get:
          path: "/api/v1/device/{deviceId}/TemperatureSensor"
          responses:
            - code: "200"
              description: "Get the current temperature"
              expectedValues: ["TemperatureSensor"]
            - code: "503"
              description: "Service unavailable"
              expectedValues: []
        put:
          path: "/api/v1/device/{deviceId}/TemperatureSensor"
          parameterNames: ["TemperatureSensor"]
          responses:
            - code: "204"
              description: "Set the temperature"
              expectedValues: []
            - code: "503"
              description: "Service Unavailable"
              expectedValues: []